import Head from "next/head";
import React, { useEffect, useRef, useState } from "react";
import styles from "../styles/Home.module.css";
import { RtmClient,RtmChannel } from "agora-rtm-sdk";
type Room = {
  _id: string;
  status: string;
};
type TMessage = {
  userId: string;
  message: string | undefined;
};
function createRoom(): Promise<Room> {
  return fetch("api/rooms",{
    method: "POST",
  }).then((response) => response.json());
}
function getRandomRoom(): Promise<Room[]>{
  return fetch("/api/rooms").then((response) => response.json());
}
async function connectToAgora(
  roomId: string,
  userId: string,
  onMessage: (message: TMessage) => void,
  //token: string
) {
  const { default: AgoraRTM } = await import("agora-rtm-sdk");
  const client = AgoraRTM.createInstance(process.env.NEXT_PUBLIC_AGORA_APP_ID!);
  await client.login({
    uid: userId,
    //token,
  });
  const channel = await client.createChannel(roomId);
  await channel.join();
  channel.on("ChannelMessage", (message, userId) => {
    onMessage({
      userId,
      message: message.text,
    });
  });

  return {
    channel,
  };
}
export default function Home() {
  const [userId] = useState(Math.random() * 1e6 + "");
  const [room, setRoom] = useState<Room | undefined>();
  const [messages, setMessages] = useState<TMessage[]>([]);
  const [input, setInput] = useState("");
  const channelRef = useRef<RtmChannel>();

  async function handleStartChattingClicked() {
    getRandomRoom().then(async (rooms) => {
      if(rooms.length > 0){
        //todo connect to the room
        setRoom(rooms[0]);
        const {channel} = await connectToAgora(
          rooms[0]._id,
          userId,
          (message: TMessage) => setMessages((cur) => [...cur, message])
        );
        channelRef.current = channel;
      }else{
        //create new room
        const room = await createRoom();
          setRoom(room);
          const {channel} = await connectToAgora(room._id,
            userId,
            (message: TMessage) => setMessages((cur) => [...cur, message])
            );
          channelRef.current = channel;
      }
    })
    
  }
  async function handleSubmitMessage() {
    //e.preventDefault();
    await channelRef.current?.sendMessage({
      text: input,
    });
    setInput("");
  }
  function convertToYouThem(message: TMessage) {
    return message.userId === userId ? "You" : "Them";
  }
  return (
    <>
      <Head>
        <title>PrepMeUp</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>{room?._id}

      <ul>
        {messages.map((message, idx) => (
          <li key={idx}>
            {message.userId} - {message.message}
          </li>
        ))}
      </ul>
      <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
        ></input>
      <button onClick={handleSubmitMessage}>Submit</button>
      <button onClick={handleStartChattingClicked}>Start Chatting</button>
      </main>

    </>
  );
}
